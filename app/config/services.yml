# Learn more about services, parameters and containers at
# https://symfony.com/doc/current/service_container.html
parameters:
    #parameter_name: value

services:
    # default configuration for services in *this* file
    _defaults:
        # automatically injects dependencies in your services
        autowire: true
        # automatically registers your services as commands, event subscribers, etc.
        autoconfigure: true
        # this means you cannot fetch services directly from the container via $container->get()
        # if you need to do this, you can override this setting on individual services
        public: false

    twig.extension.intl:
        class: Twig_Extensions_Extension_Intl
        tags:
            - { name: twig.extension }
    # makes classes in src/AppBundle available to be used as services
    # this creates a service per class whose id is the fully-qualified class name


    # controllers are imported separately to make sure they're public
    # and have a tag that allows actions to type-hint services


    # add more services, or override services that need manual wiring
    # AppBundle\Service\ExampleService:
    #     arguments:
    #         $someArgument: 'some_value'
    resto.image_uploader:
        class: FabBundle\ImageUpload
        arguments: ['%images_directory%']

    resto.doctrine_image_listener:
        class: FabBundle\EventListener\UploadImageListener
        arguments: ['@resto.image_uploader']
        tags:
            - { name: doctrine.event_listener, event: prePersist }
            - { name: doctrine.event_listener, event: preUpdate }

    
    
    UserBundle\Form\Extension\ImageTypeExtension:
        tags:
            - { name: form.type_extension, extended_type: Symfony\Component\Form\Extension\Core\Type\FileType }
    
    offre.image_uploader:
        class: UserBundle\ImageUpload
        arguments: ['%images_directory%']

    offre.doctrine_image_listener:
        class: UserBundle\EventListener\UploadImageListener
        arguments: ['@offre.image_uploader']
        tags:
            - { name: doctrine.event_listener, event: prePersist }
            - { name: doctrine.event_listener, event: preUpdate }
            
    app.client.stripe:
        public: true
        class: UserBundle\Client\StripeClient
        arguments: ['%stripe_secret_key%', '%payment%', '@doctrine.orm.entity_manager', '@logger']            